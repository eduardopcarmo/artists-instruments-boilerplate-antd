{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\artists-instruments-boilerplate-antd\\\\client\\\\src\\\\components\\\\forms\\\\UpdateInstrument.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Form, Input, Button } from 'antd';\nimport { UPDATE_INSTRUMENT } from '../../queries';\n\nconst UpdateInstrument = props => {\n  const [id] = useState(props.id);\n  const [year, setYear] = useState(props.year);\n  const [brand, setBrand] = useState(props.brand);\n  const [type, setType] = useState(props.type);\n  const [price, setPrice] = useState(props.price);\n  const [artistId, setArtistId] = useState(props.artistId);\n  const [updateInstrument] = useMutation(UPDATE_INSTRUMENT);\n  const [form] = Form.useForm();\n  const [, forceUpdate] = useState();\n  useEffect(() => {\n    forceUpdate({});\n  }, []);\n\n  const onFinish = values => {\n    const {\n      year,\n      brand,\n      type,\n      price,\n      artistId\n    } = values;\n    updateInstrument({\n      variables: {\n        id,\n        year,\n        brand,\n        type,\n        price,\n        artistId\n      },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        updateInstrument: {\n          __typename: 'Instrument',\n          id,\n          year,\n          brand,\n          type,\n          price,\n          artistId\n        }\n      }\n    });\n    props.onButtonClick();\n  };\n\n  const updateStateVariable = (variable, value) => {\n    switch (variable) {\n      case 'year':\n        props.updateStateVariable('year', value);\n        setYear(value);\n        break;\n\n      case 'brand':\n        props.updateStateVariable('brand', value);\n        setBrand(value);\n        break;\n\n      case 'type':\n        props.updateStateVariable('type', value);\n        setType(value);\n        break;\n\n      case 'price':\n        props.updateStateVariable('price', value);\n        setPrice(value);\n        break;\n\n      case 'artistId':\n        props.updateStateVariable('artistId', value);\n        setArtistId(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    name: \"update-artist-form\",\n    layout: \"inline\",\n    onFinish: onFinish,\n    initialValues: {\n      year: year,\n      brand: brand,\n      type: type,\n      price: price,\n      artistId: artistId\n    },\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"year\",\n    rules: [{\n      required: true,\n      message: 'Please input the instrument year!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"i.e. 1982\",\n    onChange: e => updateStateVariable('year', e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"brand\",\n    rules: [{\n      required: true,\n      message: 'Please input the instrument brand!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"i.e. Yamaha\",\n    onChange: e => updateStateVariable('brand', e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"type\",\n    rules: [{\n      required: true,\n      message: 'Please input the instrument type!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"i.e. Piano\",\n    onChange: e => updateStateVariable('type', e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"price\",\n    rules: [{\n      required: true,\n      message: 'Please input the instrument price!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"i.e. 1000\",\n    onChange: e => updateStateVariable('price', e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"artistId\",\n    rules: [{\n      required: true,\n      message: 'Please input the instrument artistId!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    style: {\n      width: 120\n    },\n    onChange: e => updateStateVariable('price', e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Option, {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }), data.artists.map(item => {\n    return /*#__PURE__*/React.createElement(Option, {\n      value: item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }\n    }, `${item.firstName} ${item.lastName}`);\n  }))), /*#__PURE__*/React.createElement(Form.Item, {\n    shouldUpdate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, () => /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: !form.isFieldsTouched(true) || form.getFieldsError().filter(({\n      errors\n    }) => errors.length).length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, \"Update Instrument\")), /*#__PURE__*/React.createElement(Button, {\n    onClick: props.onButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, \"Cancel\"));\n};\n\nexport default UpdateInstrument;","map":{"version":3,"sources":["D:/Projects/artists-instruments-boilerplate-antd/client/src/components/forms/UpdateInstrument.js"],"names":["React","useEffect","useState","useMutation","Form","Input","Button","UPDATE_INSTRUMENT","UpdateInstrument","props","id","year","setYear","brand","setBrand","type","setType","price","setPrice","artistId","setArtistId","updateInstrument","form","useForm","forceUpdate","onFinish","values","variables","optimisticResponse","__typename","onButtonClick","updateStateVariable","variable","value","required","message","e","target","width","data","artists","map","item","firstName","lastName","isFieldsTouched","getFieldsError","filter","errors","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { UPDATE_INSTRUMENT } from '../../queries';\r\n\r\nconst UpdateInstrument = (props) => {\r\n  const [id] = useState(props.id);\r\n  const [year, setYear] = useState(props.year);\r\n  const [brand, setBrand] = useState(props.brand);\r\n  const [type, setType] = useState(props.type);\r\n  const [price, setPrice] = useState(props.price);\r\n  const [artistId, setArtistId] = useState(props.artistId);\r\n  const [updateInstrument] = useMutation(UPDATE_INSTRUMENT);\r\n\r\n  const [form] = Form.useForm();\r\n  const [, forceUpdate] = useState();\r\n\r\n  useEffect(() => {\r\n    forceUpdate({});\r\n  }, []);\r\n\r\n  const onFinish = (values) => {\r\n    const { year, brand, type, price, artistId } = values;\r\n    updateInstrument({\r\n      variables: {\r\n        id,\r\n        year,\r\n        brand,\r\n        type,\r\n        price,\r\n        artistId,\r\n      },\r\n      optimisticResponse: {\r\n        __typename: 'Mutation',\r\n        updateInstrument: {\r\n          __typename: 'Instrument',\r\n          id,\r\n          year,\r\n          brand,\r\n          type,\r\n          price,\r\n          artistId,\r\n        },\r\n      },\r\n    });\r\n    props.onButtonClick();\r\n  };\r\n\r\n  const updateStateVariable = (variable, value) => {\r\n    switch (variable) {\r\n      case 'year':\r\n        props.updateStateVariable('year', value);\r\n        setYear(value);\r\n        break;\r\n      case 'brand':\r\n        props.updateStateVariable('brand', value);\r\n        setBrand(value);\r\n        break;\r\n      case 'type':\r\n        props.updateStateVariable('type', value);\r\n        setType(value);\r\n        break;\r\n      case 'price':\r\n        props.updateStateVariable('price', value);\r\n        setPrice(value);\r\n        break;\r\n      case 'artistId':\r\n        props.updateStateVariable('artistId', value);\r\n        setArtistId(value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      form={form}\r\n      name=\"update-artist-form\"\r\n      layout=\"inline\"\r\n      onFinish={onFinish}\r\n      initialValues={{\r\n        year: year,\r\n        brand: brand,\r\n        type: type,\r\n        price: price,\r\n        artistId: artistId,\r\n      }}\r\n      size=\"large\"\r\n    >\r\n      <Form.Item\r\n        name=\"year\"\r\n        rules={[\r\n          { required: true, message: 'Please input the instrument year!' },\r\n        ]}\r\n      >\r\n        <Input\r\n          placeholder=\"i.e. 1982\"\r\n          onChange={(e) => updateStateVariable('year', e.target.value)}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"brand\"\r\n        rules={[\r\n          { required: true, message: 'Please input the instrument brand!' },\r\n        ]}\r\n      >\r\n        <Input\r\n          placeholder=\"i.e. Yamaha\"\r\n          onChange={(e) => updateStateVariable('brand', e.target.value)}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"type\"\r\n        rules={[\r\n          { required: true, message: 'Please input the instrument type!' },\r\n        ]}\r\n      >\r\n        <Input\r\n          placeholder=\"i.e. Piano\"\r\n          onChange={(e) => updateStateVariable('type', e.target.value)}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"price\"\r\n        rules={[\r\n          { required: true, message: 'Please input the instrument price!' },\r\n        ]}\r\n      >\r\n        <Input\r\n          placeholder=\"i.e. 1000\"\r\n          onChange={(e) => updateStateVariable('price', e.target.value)}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"artistId\"\r\n        rules={[\r\n          { required: true, message: 'Please input the instrument artistId!' },\r\n        ]}\r\n      >\r\n        <Select\r\n          style={{ width: 120 }}\r\n          onChange={(e) => updateStateVariable('price', e.target.value)}\r\n        >\r\n          <Option value=\"\"></Option>\r\n          {data.artists.map((item) => {\r\n            return (\r\n              <Option\r\n                value={item.id}\r\n              >{`${item.firstName} ${item.lastName}`}</Option>\r\n            );\r\n          })}\r\n        </Select>\r\n      </Form.Item>\r\n      <Form.Item shouldUpdate={true}>\r\n        {() => (\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            disabled={\r\n              !form.isFieldsTouched(true) ||\r\n              form.getFieldsError().filter(({ errors }) => errors.length).length\r\n            }\r\n          >\r\n            Update Instrument\r\n          </Button>\r\n        )}\r\n      </Form.Item>\r\n      <Button onClick={props.onButtonClick}>Cancel</Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default UpdateInstrument;\r\n"]},"metadata":{},"sourceType":"module"}